name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # JOB 1: Build da imagem e envio para o ECR
  build:
    name: Build e Push para ECR
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}
      image_tag: ${{ github.sha }}
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3
      
    - name: Configurar AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
        mask-aws-account-id: 'no'
        
    - name: Verificar Credenciais
      run: |
        aws sts get-caller-identity
    
    - name: Configurar Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
        
    - name: Terraform Init
      run: |
        cd application
        terraform init


    - name: Criar Reposit√≥rio ECR
      run: |
        cd application
        terraform apply -auto-approve -target=module.ecr_repository
        
        # Salvar outputs em arquivos tempor√°rios
        terraform output -raw ecr_repository_name > /tmp/repo_name.txt
        terraform output -raw ecr_repository_url > /tmp/repo_url.txt
        
        # Ler os arquivos e definir vari√°veis de ambiente
        REPO_NAME=$(cat /tmp/repo_name.txt)
        REPO_URL=$(cat /tmp/repo_url.txt)
        
        echo "ECR_REPOSITORY_NAME=$REPO_NAME" >> $GITHUB_ENV
        echo "ECR_REPOSITORY_URL=$REPO_URL" >> $GITHUB_ENV
        
        echo "Reposit√≥rio ECR criado com sucesso: $REPO_NAME"
    
    # Login no ECR
    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # Build e Push
    - name: Build e Push da Imagem
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Verificando informa√ß√µes do ECR:"
        echo "Registry: $ECR_REGISTRY"
        echo "Repository: $ECR_REPOSITORY"
        echo "Tag: $IMAGE_TAG"
        
        # Navegar para o diret√≥rio que cont√©m o Dockerfile
        cd app
        
        # Corrigir o Dockerfile se necess√°rio
        if grep -q "CMD \[\"npm\", \"start\"\]" Dockerfile; then
          sed -i 's/CMD \["npm", "start"\]/CMD \["npm", "run", "dev"\]/' Dockerfile
          echo "Corrigido o comando no Dockerfile"
        fi
        
        # Build da imagem Docker
        echo "Construindo imagem: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Verificar imagens constru√≠das
        docker images | grep $ECR_REPOSITORY
        
        # Push da imagem para o ECR
        echo "Enviando imagem para o ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Salvar a URI da imagem para o pr√≥ximo job
        IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        echo "Imagem constru√≠da e enviada com sucesso: $IMAGE_URI"

  # JOB 2: Deploy da aplica√ß√£o no cluster EKS
  deploy:
    name: Deploy no EKS
    runs-on: ubuntu-latest
    needs: build  # Depende do job de build
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3
      
    - name: Configurar AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    
    - name: Configurar Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
        
    - name: Terraform Init
      run: |
        cd application
        terraform init
    
    # Aplicar configura√ß√£o completa do Terraform
    - name: Deploy da Aplica√ß√£o
      run: |
        cd application
        echo "Aplicando configura√ß√£o Terraform com a nova imagem..."
        terraform apply -auto-approve -var="app_image_tag=${{ needs.build.outputs.image_tag }}" -var="use_ecr_image=true"
        echo "Terraform aplicado com sucesso!"
        
    # Verificar o deployment
    - name: Verificar Deployment
      run: |
        echo "Instalando kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        echo "Configurando kubectl para o cluster EKS..."
        aws eks update-kubeconfig --name eksDeepDiveFrankfurt --region eu-central-1
        
        echo "Verificando o status do deployment..."
        kubectl get deployment todo-app-03
        kubectl get pods -l app=todo-app-03
      
    # Exibir a URL da aplica√ß√£o
    - name: Exibir URL da Aplica√ß√£o
      run: |
        cd application
        LOAD_BALANCER_URL=$(terraform output -raw app_url || echo "URL n√£o dispon√≠vel")
        echo "============================================="
        echo "üöÄ A aplica√ß√£o foi implantada com sucesso!"
        echo "üì± Acesse a aplica√ß√£o em: $LOAD_BALANCER_URL"
        echo "============================================="
