name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
      
    - name: Configurar AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
        mask-aws-account-id: 'no'
        
    - name: Verificar Credenciais
      run: |
        aws sts get-caller-identity
        aws ecr describe-repositories || echo "Nenhum repositório ECR encontrado, mas a conexão foi estabelecida"
    
    - name: Configurar Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
        
    - name: Terraform Init e Validar
      run: |
        cd application
        terraform init
        terraform validate
    
    # Primeiro criaremos o repositório ECR
    - name: Terraform Apply apenas para ECR
      run: |
        cd application
        terraform apply -auto-approve -target=module.ecr_repository
        # Salvar a URL do repositório ECR em um arquivo para uso posterior
        terraform output -raw ecr_repository_url > /tmp/ecr_repository_url.txt
    
    # Agora fazemos login no ECR criado
    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # Construir e enviar a imagem para o ECR
    - name: Build, tag, e push da imagem para Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Obter a URL do repositório ECR do arquivo
        ECR_REPOSITORY_URL=$(cat /tmp/ecr_repository_url.txt)
        # Extrair o nome do repositório da URL
        ECR_REPOSITORY=$(echo $ECR_REPOSITORY_URL | awk -F/ '{print $2}')
        echo "Repositório ECR: $ECR_REPOSITORY"
        
        # Navegar para o diretório que contém o Dockerfile
        cd app
        
        # Corrigir o Dockerfile se necessário - precisamos que ele use 'dev' em vez de 'start'
        if grep -q "CMD \[\"npm\", \"start\"\]" Dockerfile; then
          sed -i 's/CMD \["npm", "start"\]/CMD \["npm", "run", "dev"\]/' Dockerfile
          echo "Corrigido o comando no Dockerfile"
        fi
        
        # Build da imagem Docker
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push da imagem para o ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Salvar o URI da imagem para uso nos próximos passos
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    # Aplicar o restante da configuração Terraform
    - name: Terraform Apply completo
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
      run: |
        cd application
        terraform apply -auto-approve -var="app_image_tag=${{ github.sha }}" -var="use_ecr_image=true"
        
    - name: Verificar Deployment
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
      run: |
        # Instalar kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Configurar o kubectl para o cluster EKS
        aws eks update-kubeconfig --name eksDeepDiveFrankfurt --region eu-central-1
        
        # Verificar o status do deployment
        kubectl get deployment todo-app-03
      
    - name: Extrair URL da aplicação
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
      run: |
        cd application
        LOAD_BALANCER_URL=$(terraform output -raw app_url || echo "URL não disponível")
        echo "A aplicação está disponível em: $LOAD_BALANCER_URL"
